<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>scExplorer</title>
    <link rel="icon" href="/scexplorer/images/logo_sc_explorer_v1.ico" type="image/x-icon">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://unpkg.com/tabulator-tables/dist/css/tabulator.css" rel="stylesheet">
    <link rel="stylesheet" href="/scexplorer/css/styles.css">
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables/dist/js/tabulator.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.js"></script>
</head>

<body>
    <aside class="sidebar">
        <img src="/scexplorer/images/logo_sc_explorer_v1.png" alt="scExplorer logo" class="sidebar-logo" />
        <h1 class="sidebar-title">scExplorer</h1>
        <ul>
            <li><a href="/scexplorer/"><i class="fas fa-home"></i> Home</a></li>
            <li><a href="/scexplorer/integration"><i class="fas fa-layer-group"></i>Integration</a></li>
            <li><a href="/scexplorer/upload"><span class="step-number">0</span> <i class="fas fa-upload"></i> Upload</a></li>
            <li><a href="/scexplorer/preprocess"><span class="step-number">1</span> <i class="fas fa-cogs"></i> Preprocess</a></li>
            <li><a href="/scexplorer/embedding"><span class="step-number">2</span> <i class="fas fa-vector-square"></i> Embedding</a></li>
            <li><a href="/scexplorer/dea"><span class="step-number">3</span> <i class="fas fa-chart-bar"></i> DEA</a></li>
            <li><a href="/scexplorer/visualization"><span class="step-number">4</span> <i class="fas fa-chart-area"></i> Visualization</a></li>
            <li><a href="/scexplorer/results"><span class="step-number">5</span> <i class="fas fa-poll"></i> Results</a></li>
        </ul>
        <div class="resizer"></div>
        <i id="toggleSidebarBtn" class="fas fa-angle-double-left white-icon" onclick="toggleSidebar()"></i>
    </aside>
    <button id="showSidebarBtn" class="show-sidebar-btn" onclick="toggleSidebar()"><i class="fas fa-angle-double-right"></i></button>

    <section>
        <div id="loadingOverlay"
            style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.6); z-index:100;">
            <div style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%);">
                <div style="color:white; font-size:20px; text-align:center;">
                    <p>Differential Expression Analysis...</p>
                    <img src="/scexplorer/images/loading3.svg" alt="Loading..." style="display:block; margin:auto;" />
                </div>
            </div>
        </div>

        <div class="header-buttons">
            <button onclick="openHelpModal()">Help</button>
        </div>
        <h2><i class="fas fa-chart-bar"></i> DEA</h2>
        <div id="analysisInfoBox"></div>
    </section>

    <div class="embeding-box">
        <div class="params-box">
            <div>
                <label for="n_genes">Number of Genes:
                    <i class="fas fa-info-circle" style="color:#000000; cursor: pointer;">
                        <span class="tooltip">Select up to 8 genes per cluster.</span>
                    </i>
                </label>
                <input type="number" id="n_genes" placeholder="Enter number of genes">
            </div>
            <div class="input-group">
                <label for="method">Statistical Method:
                    <i class="fas fa-info-circle" style="color:#000000; cursor: pointer;">
                        <span class="tooltip">Select t-test or Wilcoxon.</span>
                    </i>
                </label>
                <select id="method" name="method">
                    <option value="wilcoxon">Wilcoxon</option>
                    <option value="t-test">t-test</option>
                </select>
            </div>
            <div class="gene-list-container">
                <div>
                    <label for="gene_list">Gene List:
                        <i class="fas fa-info-circle" style="color:#000000; cursor: pointer;">
                            <span class="tooltip">Select up to 30 genes.</span>
                        </i>
                    </label>
                    <input type="text" id="gene_list" placeholder="Type to filter genes">
                    <select id="gene_options" name="genes" multiple size="6"></select>
                </div>
                <div id="selectedGenesContainer"></div>
            </div>
        </div>

        <div class="upload-btn">
            <button id="startDEA">Run</button>
        </div>


        <div id="helpModal" class="modal_help">
            <div class="modal_help-content">
                <span class="close" onclick="closeHelpModal()">&times;</span>
                <h2>DEA</h2>
                <p>
                    For the DEA first you must choose the Number of Genes to be plotted per cluster (maximum 8) (1) and the Statistical Method to be employed in the analysis (Wilcoxon or t-test) (2). In (3) you can choose a custom Gene List to plot. After that, click on Run (4) to start the analysis. Above (5) will appear a link named Differential Expression Analysis that will send the user to the full DEA results per cluster and below (6) two options for Dot Plot will be generated. Here, the color indicates whether the gene is up- or down-regulated and the dot size indicate the percentage in which each gene is expressed at each cluster. Next, click on Continue to Visualization (7) to plot genes in UMAP or PCA.
                    <img src="/scexplorer/images/pre_DEA.png" alt="Upload Tutorial Image" style="max-width: 100%; height: auto; margin-bottom: 20px;" />
                    <img src="/scexplorer/images/post_DEA.png" alt="Upload Tutorial Image" style="max-width: 100%; height: auto; margin-bottom: 20px;" />

                <div style="text-align: center; margin-top: 20px;">
                    <button onclick="closeHelpModal()" style="padding: 10px 20px; background-color: #000000; color: white; border: none; border-radius: 5px; cursor: pointer;">Close</button>
                </div>
            </div>
        </div>

        <div id="plotsContainer"></div>

        <div class="button-container" style="display: none;">
            <div class="button-row">
                <div class="upload-btn">
                    <button id="continueToResults">Continue to Visualization</button>
                <div class="bottom-buttons">
                    <button id="exportData" class="custom-btn">Export</button>
                    <div id="exportOptions" style="display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="tableOverlay" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.6); z-index:100;">
        <div style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); background-color: white; padding: 20px; border-radius: 10px; width: 90%; height: 90%; overflow: hidden;">
            <div class="tabulator-container" style="height: 95%;">
                <div id="example-table"></div>
                <div class="tabs">
                    <ul class="tab-links" id="csvTabs">
                        <!-- Tabs will be dynamically created here -->
                    </ul>
                    <div class="tab-content" id="csvTabContent">
                        <!-- Tab content will be dynamically created here -->
                    </div>
                </div>
            </div>
            <button onclick="hideTableOverlay()">Close</button>
        </div>
    </div>
    <script>
        window.onload = function () {
            const uuid = sessionStorage.getItem("uuid");
            const analysisNameValue = sessionStorage.getItem("analysisName");
            let cellObservationsPath = `${BASE_URL}/get_obs/uploads/${uuid}/${uuid}_obs.csv`;
            let geneObservationsPath = `${BASE_URL}/get_var/uploads/${uuid}/${uuid}_var.csv`;
            document.getElementById("analysisInfoBox").innerHTML = `
                Analysis Name: ${analysisNameValue}<br>
                UUID: ${uuid} <i class="fas fa-copy" onclick="copyToClipboard('${uuid}')" style="cursor: pointer; font-size: 14px;"></i><br>
                Cell Observations: <a href="#" onclick="showTableOverlay('${cellObservationsPath}')">View Data</a><br>
                Gene Observations: <a href="#" onclick="showTableOverlay('${geneObservationsPath}')">View Data</a><br>

            `;
            const deaPlotPaths = JSON.parse(sessionStorage.getItem("dea_plot_paths"));
            if (deaPlotPaths && deaPlotPaths.length > 0) {
                deaPlotPaths.forEach((path) => {
                    displayPlotForDEA(path, "#plotsContainer");
                });
                const buttonContainer = document.querySelector(".button-container");
                buttonContainer.style.display = "block";
            }
            fetchGeneNames(uuid);
        };

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function () { }, function (err) {
                console.error('Could not copy text: ', err);
            });
        }

        const BASE_URL = "http://apps.cienciavida.org/backend";

        function showCSVOverlay() {
            const uuid = sessionStorage.getItem("uuid");
        
            fetch(`${BASE_URL}/list_csv_files/${uuid}`)
                .then(response => response.json())
                .then(data => {
                    const tabLinks = document.getElementById('csvTabs');
                    const tabContent = document.getElementById('csvTabContent');
                    tabLinks.innerHTML = ''; // Clear existing tabs
                    tabContent.innerHTML = ''; // Clear existing tab content
        
                    // Ordenar los nombres de los archivos
                    const sortedFiles = data.files.sort();
        
                    sortedFiles.forEach((file, index) => {
                        const tabId = `tab-${file.replace(/\s+/g, '-')}`;
        
                        // Create new tab link
                        const newTabLink = document.createElement('li');
                        const newTabAnchor = document.createElement('a');
                        const displayName = file.replace('.csv', ''); // Remove .csv extension
                        newTabAnchor.href = `#${tabId}`;
                        newTabAnchor.innerText = displayName; // Set display name without .csv
                        newTabAnchor.onclick = (e) => {
                            e.preventDefault();
                            showTabContent(tabId);
                        };
                        newTabLink.appendChild(newTabAnchor);
                        tabLinks.appendChild(newTabLink);
        
                        // Create new tab content
                        const newTabContent = document.createElement('div');
                        newTabContent.id = tabId;
                        newTabContent.className = 'tab tabulator-table';
                        newTabContent.style.display = 'none';
                        tabContent.appendChild(newTabContent);
        
                        // Load CSV into Tabulator
                        fetchCSVContent(file, newTabContent);
                    });
        
                    // Show the table overlay
                    const tableOverlay = document.getElementById('tableOverlay');
                    tableOverlay.style.display = 'block';
                    
                    // Show the first tab content by default
                    if (sortedFiles.length > 0) {
                        showTabContent(`tab-${sortedFiles[0].replace(/\s+/g, '-')}`);
                    }
                });
        }
        
        function fetchCSVContent(filename, tableDiv) {
            const uuid = sessionStorage.getItem("uuid");
            const url = `${BASE_URL}/get_csv/${uuid}/${filename}`;
            fetch(url)
                .then(response => response.text())
                .then(csvText => {
                    Papa.parse(csvText, {
                        header: true,
                        complete: function(results) {
                            new Tabulator(tableDiv, {
                                data: results.data,
                                autoColumns: true,
                                layout: "fitDataTable",
                                pagination: "local",
                                paginationSize: 14,
                                height: "100%",
                                movableColumns: true,
                                responsiveLayout: false,
                            });
                        }
                    });
                });
        }
        

        function showTableOverlay(csvPath) {
            const tableOverlay = document.getElementById('tableOverlay');
            const exampleTable = document.getElementById('example-table');
        
            tableOverlay.style.display = 'block';
            fetchCSVData(csvPath)
                .then(data => {
                    displayTable(data);
                })
                .catch(error => {
                    console.error("Error fetching or parsing CSV data:", error);
                });
        }

        function displayTable(data) {
            var table = new Tabulator("#example-table", {
                data: data,
                columns: generateColumns(data),
                layout: "fitDataTable",
                pagination: "local",
                paginationSize: 14,
                height: "100%",  // Fixed height for the table
                movableColumns: true,  // Allow column movement
                responsiveLayout: false,
                tableBuilt: function() {
                    // Ensure custom styles are applied
                    document.querySelectorAll('.tabulator').forEach(function(element) {
                        element.classList.add('tabulator');
                    });
                }
            });
        }
        
        function generateColumns(data) {
            if (data.length === 0) return [];
            
            return Object.keys(data[0]).map(key => {
                const column = {
                    title: key,
                    field: key,
                    width: 160  // Ancho fijo para todas las columnas
                };
        
                // Determinar si la columna contiene números
                const isNumeric = data.some(row => {
                    const value = row[key];
                    return typeof value === 'number' || (typeof value === 'string' && !isNaN(parseFloat(value)));
                });
                
                if (isNumeric) {
                    column.formatter = threeDecimalFormatter;
                } else {
                    column.formatter = "plaintext";
                }
        
                return column;
            });
        }
        
        function threeDecimalFormatter(cell, formatterParams, onRendered) {
            let value = cell.getValue();
            if (typeof value === 'number' || (typeof value === 'string' && !isNaN(parseFloat(value)))) {
                return parseFloat(value).toFixed(3);
            }
            return value;
        }
        function fetchCSVData(url) {
            return fetch(url)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch CSV data');
                    return response.text();
                })
                .then(csvText => {
                    return new Promise((resolve, reject) => {
                        Papa.parse(csvText, {
                            header: true,
                            complete: results => {
                                resolve(results.data);
                            },
                            error: error => {
                                reject(error);
                            }
                        });
                    });
                });
        } 
        function hideTableOverlay() {
            const tableOverlay = document.getElementById('tableOverlay');
            tableOverlay.style.display = 'none';
        }
        function showTabContent(tabId) {
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => {
                tab.style.display = 'none';
            });
            const activeTab = document.getElementById(tabId);
            if (activeTab) {
                activeTab.style.display = 'block';
            }
        
            const tabLinks = document.querySelectorAll('.tab-links a');
            tabLinks.forEach(link => {
                link.classList.remove('active');
            });
            document.querySelector(`.tab-links a[href="#${tabId}"]`).classList.add('active');
        }
        
        function hideTableOverlay() {
            const tableOverlay = document.getElementById('tableOverlay');
            tableOverlay.style.display = 'none';
            const tabs = document.getElementById('csvTabContent');
            tabs.innerHTML = ''; // Clear tabs content
        }
        

    
        function fetchGeneNames(uuid) {
            const cachedGenes = sessionStorage.getItem("cachedGeneNames");
            if (cachedGenes) {
                populateGeneOptions(JSON.parse(cachedGenes));
            } else {
                document.getElementById('loadingOverlay').style.display = 'block';
                fetch(`${BASE_URL}/gene_names?uuid=${uuid}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok.');
                        return response.json();
                    })
                    .then(data => {
                        sessionStorage.setItem("cachedGeneNames", JSON.stringify(data));
                        populateGeneOptions(data);
                    })
                    .catch(error => {
                        console.error("Fetch error: ", error);
                        document.getElementById('loadingOverlay').style.display = 'none';
                    });
            }
        }
        function openHelpModal() {
            document.getElementById('helpModal').style.display = 'block';
        }
    
        function closeHelpModal() {
            document.getElementById('helpModal').style.display = 'none';
        }
    
        window.onclick = function(event) {
            var modal = document.getElementById('helpModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
        function populateGeneOptions(data) {
            const genesSelect = document.getElementById('gene_options');
            genesSelect.innerHTML = '';
            data.forEach(gene => {
                const option = document.createElement('option');
                option.value = gene;
                option.textContent = gene;
                genesSelect.appendChild(option);
            });
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        document.getElementById("startDEA").addEventListener("click", function () {
            const uuid = sessionStorage.getItem("uuid");
            const geneList = getSelectedGenes();

            const n_genesValue = document.getElementById("n_genes").value;
            const methodValue = document.getElementById("method").value;
            document.getElementById('loadingOverlay').style.display = 'block';

            fetch(`${BASE_URL}/DEA/?file_uuid=${uuid}&n_genes=${n_genesValue}&flavor=mean_expression&method=${methodValue}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(geneList)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data && Array.isArray(data)) {
                        const plotsContainer = document.getElementById("plotsContainer");
                        plotsContainer.innerHTML = '';

                        data.forEach(path => {
                            const iframe = document.createElement("iframe");
                            iframe.src = `${BASE_URL}/plots_dea/${path}`;
                            iframe.style.width = "100%";
                            iframe.style.height = "400px";
                            iframe.onload = function () {
                                const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
                                const img = iframeDocument.querySelector('img');
                                if (img) {
                                    img.style.maxWidth = '100%';
                                    img.style.maxHeight = '100%';
                                }
                            };
                            plotsContainer.appendChild(iframe);
                            const buttonContainer = document.querySelector(".button-container");
                            buttonContainer.style.display = "block";
                        });
                        sessionStorage.setItem("dea_plot_paths", JSON.stringify(data));
                        document.getElementById('loadingOverlay').style.display = 'none';
                        updateAnalysisInfoBox();
                    } else {
                        console.error("Expected data to be an array, but received:", data);
                        document.getElementById('loadingOverlay').style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error("Error with DEA:", error);
                    document.getElementById('loadingOverlay').style.display = 'none';
                });
        });
        function updateAnalysisInfoBox() {
            const uuid = sessionStorage.getItem("uuid");
            const analysisInfoBox = document.getElementById("analysisInfoBox");
            analysisInfoBox.innerHTML += `
                Differential Expression Analysis: <a href="#" onclick="showCSVOverlay()">View Data</a><br>
            `;
        }
        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const sections = document.querySelectorAll('section, .embeding-box, .params-box, .plots-container');
            const toggleSidebarBtn = document.getElementById('toggleSidebarBtn');
            const showSidebarBtn = document.getElementById('showSidebarBtn');
            if (sidebar.classList.contains('hidden')) {
                sidebar.classList.remove('hidden');
                sections.forEach(section => {
                    section.style.marginLeft = '250px';
                    section.style.width = '80%';
                });
                toggleSidebarBtn.style.display = 'block';
                showSidebarBtn.style.display = 'none';
            } else {
                sidebar.classList.add('hidden');
                sections.forEach(section => {
                    section.style.marginLeft = '150px';
                    section.style.width = '80%';
                });
                toggleSidebarBtn.style.display = 'none';
                showSidebarBtn.style.display = 'block';
            }
        }

        function showSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const sections = document.querySelectorAll('section, .embeding-box, .params-box, .plots-container');
            const toggleSidebarBtn = document.getElementById('toggleSidebarBtn');
            const showSidebarBtn = document.getElementById('showSidebarBtn');
            sidebar.classList.remove('hidden');
            sections.forEach(section => {
                section.style.marginLeft = '250px';
                section.style.width = '80%';
            });
            toggleSidebarBtn.style.display = 'block';
            showSidebarBtn.style.display = 'none';
        }

        document.getElementById("continueToResults").addEventListener("click", function () {
            sessionStorage.removeItem('selectedGenes');
            window.location.href = "/scexplorer/visualization";
        });

        function displayPlotForDEA(plotUrl, containerSelector) {
            const container = document.querySelector(containerSelector);
            const column = document.createElement("div");
            column.className = "column-dea";
            const iframe = document.createElement("iframe");
            iframe.src = `${BASE_URL}/plots_dea/${plotUrl}`;
            iframe.style.width = "100%";
            iframe.style.height = "416px";
            iframe.style.border = "none";
            iframe.style.marginTop = "10px";
            iframe.onload = function () {
                const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
                const img = iframeDocument.querySelector('img');
                if (img) {
                    img.style.maxWidth = '100%';
                    img.style.maxHeight = '100%';
                }
            };
            column.appendChild(iframe);
            container.appendChild(column);
        }

        function setupGeneSearch() {
            const geneListInput = document.getElementById('gene_list');
            const geneOptions = document.getElementById('gene_options');
            geneListInput.addEventListener('input', () => {
                const searchValue = geneListInput.value.toLowerCase();
                Array.from(geneOptions.options).forEach(option => {
                    option.style.display = option.text.toLowerCase().includes(searchValue) ? '' : 'none';
                });
            });
        }

        function setupGeneSelection() {
            const geneOptions = document.getElementById('gene_options');
            geneOptions.addEventListener('mousedown', function (event) {
                if (event.target.tagName === 'OPTION') {
                    event.preventDefault();
                    const option = event.target;
                    if (!option.selected && geneOptions.selectedOptions.length >= 30) {
                        alert('You can only select up to 30 genes.');
                        return;
                    }
                    option.selected = !option.selected;
                    updateSelectedGenesDisplay();
                }
            });
        }

        function updateSelectedGenesDisplay() {
            const geneOptions = document.getElementById('gene_options');
            const selectedGenesContainer = document.getElementById('selectedGenesContainer');
            selectedGenesContainer.innerHTML = '';
            let selectedGenes = [];
            Array.from(geneOptions.selectedOptions).forEach(option => {
                const div = document.createElement('div');
                div.className = 'selected-gene';
                div.textContent = option.value;

                const close = document.createElement('span');
                close.textContent = '×';
                close.className = 'close';
                close.onclick = function () {
                    option.selected = false;
                    updateSelectedGenesDisplay();
                };

                div.appendChild(close);
                selectedGenesContainer.appendChild(div);
                selectedGenes.push(option.value);
            });
            sessionStorage.setItem('selectedGenes', JSON.stringify(selectedGenes));
        }

        function getSelectedGenes() {
            const geneOptions = document.getElementById('gene_options');
            return Array.from(geneOptions.selectedOptions).map(option => option.value);
        }

        document.addEventListener("DOMContentLoaded", function () {
            setupGeneSearch();
            setupGeneSelection();
        });

        document.getElementById('exportData').addEventListener('click', function () {
            const exportOptions = document.getElementById('exportOptions');
            exportOptions.style.display = exportOptions.style.display === 'none' ? 'block' : 'none';
            exportOptions.innerHTML = '';

            const options = [
                { name: 'Export for Seurat', action: exportForSeurat },
                { name: 'Export for Scanpy', action: exportForScanpy }
            ];

            const ul = document.createElement('ul');
            options.forEach(opt => {
                const li = document.createElement('li');
                li.textContent = opt.name;
                li.classList.add('export-option');
                li.addEventListener('click', function () {
                    opt.action();
                    exportOptions.style.display = 'none';
                });
                ul.appendChild(li);
            });

            exportOptions.appendChild(ul);
        });

        function exportForSeurat() {
            showLoadingOverlay('Exporting for Seurat...');

            const uuid = sessionStorage.getItem("uuid");
            if (!uuid) {
                console.error("UUID not found in session storage.");
                return;
            }

            const url = `http://apps.cienciavida.org/backend/seurat_export?uuid=${uuid}`;
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ uuid: uuid })
            };

            fetch(url, options)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to export file');
                    hideLoadingOverlay();
                    return response.blob();
                })
                .then(blob => {
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = `${uuid}.rds`; 
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl); 
                })
                .catch(error => {
                    console.error("Error during file export:", error);
                    hideLoadingOverlay();
                });
        }

        function exportForScanpy() {
            showLoadingOverlay('Exporting for Scanpy...');

            const uuid = sessionStorage.getItem("uuid");
            if (!uuid) {
                console.error("UUID not found in session storage.");
                return;
            }

            const url = `http://apps.cienciavida.org/backend/scanpy_export?uuid=${uuid}`;
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ uuid: uuid })
            };

            fetch(url, options)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to export file');

                    return response.blob();
                })
                .then(blob => {
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = `${uuid}.h5ad`; 
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl); 
                    hideLoadingOverlay();

                })
                .catch(error => {
                    hideLoadingOverlay();

                    console.error("Error during file export:", error);
                    
                });
        }

        function showLoadingOverlay(message) {
            const loadingOverlay = document.getElementById('loadingOverlay');
            const loadingText = document.querySelector('#loadingOverlay p');
            loadingText.textContent = message;
            loadingOverlay.style.display = 'block';
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }
    </script>
    </section>
</body>

</html>
