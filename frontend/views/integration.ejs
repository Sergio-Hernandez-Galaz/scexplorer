<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>scExplorer</title>
    <link rel="icon" href="/scexplorer/images/logo_sc_explorer_v1.ico" type="image/x-icon">
    <link rel="stylesheet" href="/scexplorer/css/styles.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
</head>

<body>
    <aside class="sidebar">
        <img src="/scexplorer/images/logo_sc_explorer_v1.png" alt="scExplorer logo" class="sidebar-logo" />
        <h1 class="sidebar-title">scExplorer</h1>
        <ul>
            <li><a href="/scexplorer/"><i class="fas fa-home"></i> Home</a></li>
            <li><a href="/scexplorer/integration"><i class="fas fa-layer-group"></i>Integration</a></li>
            <li><a href="/scexplorer/upload"><span class="step-number">0</span> <i class="fas fa-upload"></i> Upload</a></li>
            <li><a href="/scexplorer/preprocess"><span class="step-number">1</span> <i class="fas fa-cogs"></i> Preprocess</a></li>
            <li><a href="/scexplorer/embedding"><span class="step-number">2</span> <i class="fas fa-vector-square"></i> Embedding</a></li>
            <li><a href="/scexplorer/dea"><span class="step-number">3</span> <i class="fas fa-chart-bar"></i> DEA</a></li>
            <li><a href="/scexplorer/visualization"><span class="step-number">4</span> <i class="fas fa-chart-area"></i> Visualization</a></li>
            <li><a href="/scexplorer/results"><span class="step-number">5</span> <i class="fas fa-poll"></i> Results</a></li>
        </ul>
        <div class="resizer"></div>
        <i id="toggleSidebarBtn" class="fas fa-angle-double-left white-icon" onclick="toggleSidebar()"></i>
    </aside>
    <button id="showSidebarBtn" class="show-sidebar-btn" onclick="toggleSidebar()"><i class="fas fa-angle-double-right"></i></button>

    <section>

        <div class="header-buttons">
            <button onclick="openHelpModal()">Help</button>
        </div>

        <h2><i class="fas fa-layer-group"></i> Data Integration</h2>

        <div class="row">
            <div class="column third">
                <div class="input-group">
                    <label for="analysisName">Analysis Name:</label>
                    <input type="text" id="analysisName" name="analysisName" placeholder="Enter Analysis Name" required autocomplete="off" />
                </div>
            </div>
            <div class="column third">
                <div class="input-group">
                    <label for="email">Email:</label>
                    <input type="email" id="email" name="email" placeholder="Enter Email" required autocomplete="email" />
                </div>
            </div>
            <div class="column third">
                <div class="input-group">
                    <label for="batchCorrectionMethod">Batch Correction Method:</label>
                    <select id="batchCorrectionMethod" name="batchCorrectionMethod">
                        <option value="combat">Combat</option>
                        <option value="scanorama">Scanorama</option>
                        <option value="bbknn">BBKNN</option>
                        <option value="harmony">Harmony</option>
                    </select>
                </div>
            </div>
            <div class="column third">
                <div class="input-group">
                    <label for="preprocess">Preprocess:</label>
                    <select id="preprocess" name="preprocess">
                        <option value="true">True</option>
                        <option value="false">False</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="column third">
                <div class="upload-container" ondrop="dropHandler(event, 'fileInput1');" ondragover="dragOverHandler(event);">
                    <i class="fas fa-upload upload-icon"></i>
                    <p>Drag file(s) here to upload.</p>
                    <p id="droppedFileName1"></p>
                    <p>Alternatively, you can select a file by <a href="#" onclick="document.getElementById('fileInput1').click();">clicking here</a></p>
                    <input type="file" id="fileInput1" style="display: none" onchange="handleFileSelection('fileInput1', 'droppedFileName1')" />
                </div>
            </div>
            <div class="column third">
                <div class="upload-container" ondrop="dropHandler(event, 'fileInput2');" ondragover="dragOverHandler(event);">
                    <i class="fas fa-upload upload-icon"></i>
                    <p>Drag file(s) here to upload.</p>
                    <p id="droppedFileName2"></p>
                    <p>Alternatively, you can select a file by <a href="#" onclick="document.getElementById('fileInput2').click();">clicking here</a></p>
                    <input type="file" id="fileInput2" style="display: none" onchange="handleFileSelection('fileInput2', 'droppedFileName2')" />
                </div>
            </div>
            <div class="column third" id="additionalContainer" style="display:none;">
                <div class="upload-container" ondrop="dropHandler(event, 'fileInput3');" ondragover="dragOverHandler(event);">
                    <i class="fas fa-upload upload-icon"></i>
                    <p>Drag file(s) here to upload.</p>
                    <p id="droppedFileName3"></p>
                    <p>Alternatively, you can select a file by <a href="#" onclick="document.getElementById('fileInput3').click();">clicking here</a></p>
                    <input type="file" id="fileInput3" style="display: none" onchange="handleFileSelection('fileInput3', 'droppedFileName3')" />
                </div>
            </div>
            <div class="column third">
                <button id="addUploadBtn" onclick="addUploadContainer();">+</button>
            </div>
        </div>

        <div class="upload-btn">
            <button onclick="uploadFilesToServer();">Upload</button>
        </div>
        <h3 class="plots-title" style="display: none;">Integration Results</h3>
        <div class="plots-container"></div>
        <div class="control-btns" style="display: none;">
            <button id="exportBtn" class="custom-btn">Export</button>
            <button id="downloadBtn" class="custom-btn">Download Plot</button>
            <div id="exportOptionsPre" style="display: none;"></div>
        </div>
        <div id="myModal" class="modal">
            <div class="modal-content">
                <img id="modalIcon" src="" alt="">
                <p id="modalText">Some text in the Modal..</p>
                <div id="uuidContainer" style="display: none">
                    <div class="uuid-display-container">
                        <textarea id="uuidText" readonly onclick="this.focus();this.select()"></textarea>
                        <button onclick="copyToClipboard()">Copy</button>
                    </div>
                </div>
                <span class="close">&times;</span>
            </div>
        </div>

        <div id="helpModal" class="modal_help">
            <div class="modal_help-content">
                <span class="close" onclick="closeHelpModal()">&times;</span>
                <h2>Integration</h2>
                <p>
                    Integration refers to the process of combining data from multiple sources or experiments to create a unified dataset. These sources could be different individuals, biological conditions, batches, technologies (e.g., different sequencing platforms), or tissues. Integration is crucial because it addresses the variability and technical noise that often arises when data is collected from separate experiments or labs, making it possible to compare and analyze the data as a whole. When performing scRNA-seq experiments across multiple conditions or batches, technical and biological factors can introduce unwanted variations into the data. This variation, often referred to as "batch effects" or "technical noise," can obscure the true biological signals you're interested in. Integration helps to account for these discrepancies, ensuring that cells from different sources can be compared more accurately.
                    To integrate your data with scExplorer go to Integration (1) section. Next upload or drag individual files in (2). If more than two datasets need to be integrated, click in (3). Next, indicate an Analysis Name (3), and Email (4) to notify when the analysis has finished, the Batch Correction Method to use during the integration (5), and indicate whether the dataset is Preprocessed (6). Finally, click on Upload (7) button to start the analysis.    

                <img src="/scexplorer/images/integration.png" alt="Upload Tutorial Image" style="max-width: 100%; height: auto; margin-bottom: 20px;" />
                
                <!-- Create the blue light rounded box with black dashed border -->
                <div style="
                    background-color: #e0f7fa;
                    border: 2px dashed black;
                    border-radius: 10px;
                    padding: 20px;
                    margin: 20px 0;
                    font-family: 'Poppins', sans-serif;
                ">
                    <p>
                        scExplorer offers four different batch correction methods: Combat, Scanorama, BBKNN, and Harmony. Combat is a statistical method originally developed for correcting batch effects in microarray data but has been adapted for single-cell RNA-seq data. It adjusts for known batch effects by applying an empirical Bayes framework. Scanorama is a graph-based method designed specifically for single-cell RNA-seq data integration. It aligns multiple datasets by identifying mutual nearest neighbors (MNNs) between them, then stitches the datasets together based on these commonalities. BBKNN (Batch Balanced K-Nearest Neighbors) is a KNN-based batch correction method that operates in the context of UMAP or other dimensionality reduction techniques. It works by adjusting the neighbor search to be batch-aware, ensuring that each cell’s neighbors come from different batches. Harmony is a fast and scalable batch correction method designed to handle complex multi-dataset integrations. It iteratively adjusts the cell embeddings in reduced-dimensional space to align cells across batches while preserving biological variation. Each one of these methods have advantages and disadvantages. Thus, we encourage users to explore all of these methods.                    </p>
                </div>

        
                <div style="text-align: center; margin-top: 20px;">
                    <button onclick="closeHelpModal()" style="padding: 10px 20px; background-color: #000000; color: white; border: none; border-radius: 5px; cursor: pointer;">Close</button>
                </div>
            </div>
        </div>

    </section>

    <div id="loadingOverlay" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.6); z-index:100;">
        <div style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%);">
            <div style="color:white; font-size:20px; text-align:center;">
                <p>Uploading...</p>
                <img src="/scexplorer/images/loading3.svg" alt="Loading..." style="display:block; margin:auto;" />
            </div>
        </div>
    </div>

    <div id="resultsRush" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.6); z-index:100;">
        <div style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%);">
            <div style="color:white; font-size:20px; text-align:center;">
                <p>Running Pipeline...</p>
                <img src="/scexplorer/images/loading3.svg" alt="Running Pipeline..." style="display:block; margin:auto;" />
            </div>
        </div>
    </div>

    <script>
        function dragOverHandler(ev) {
            ev.preventDefault();
            document.querySelector(".upload-container").classList.add("drag-over");
        }

        function dropHandler(ev, fileInputId) {
            ev.preventDefault();
            document.querySelector(".upload-container").classList.remove("drag-over");
            let file;
            if (ev.dataTransfer.items) {
                if (ev.dataTransfer.items[0].kind === "file") {
                    file = ev.dataTransfer.items[0].getAsFile();
                }
            } else {
                file = ev.dataTransfer.files[0];
            }
            document.getElementById("droppedFileName" + fileInputId.slice(-1)).innerText = file.name;
            document.getElementById(fileInputId).files = ev.dataTransfer.files;
        }

        function handleFileSelection(fileInputId, droppedFileNameId) {
            const fileInput = document.getElementById(fileInputId);
            if (fileInput.files.length) {
                document.getElementById(droppedFileNameId).innerText = fileInput.files[0].name;
            }
        }

        function appendFilesToFormData(formData, key, files) {
            for (let i = 0; i < files.length; i++) {
                formData.append(key, files[i]);
            }
        }

        function uploadFilesToServer() {
            sessionStorage.clear();

            const fileInput1 = document.getElementById("fileInput1");
            const fileInput2 = document.getElementById("fileInput2");
            const fileInput3 = document.getElementById("fileInput3");
            const analysisName = document.getElementById("analysisName").value;
            const email = document.getElementById("email").value;
            const batchCorrectionMethod = document.getElementById("batchCorrectionMethod").value;
            const preprocess = document.getElementById("preprocess").value;

            if (!fileInput1.files[0] || !fileInput2.files[0]) {
                alert("Please upload both files.");
                return;
            }

            document.getElementById('loadingOverlay').style.display = 'block';

            const formData = new FormData();
            appendFilesToFormData(formData, 'dataset_1', fileInput1.files);
            appendFilesToFormData(formData, 'dataset_2', fileInput2.files);
            if (fileInput3.files.length > 0) {
                appendFilesToFormData(formData, 'dataset_3', fileInput3.files);  // Append only if files are present
            }
            formData.append("analysisName", analysisName);
            formData.append("email", email);
            formData.append("batch_correction_method", batchCorrectionMethod);

            let uploadUrl = `http://apps.cienciavida.org/backend/data_integration/?preprocess=${preprocess}`;

            fetch(uploadUrl, {
                method: "POST",
                body: formData,
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(response.statusText);
                }
                return response.json();
            })
            .then(data => {
                sessionStorage.setItem("uuid", data.uuid);
                sessionStorage.setItem("integration_path", JSON.stringify(data.plots_path));

                document.getElementById('loadingOverlay').style.display = 'none';

                clearPlots();
                if (data.plots_path && data.plots_path.length > 0) {
                    document.querySelector(".plots-title").style.display = "block";
                    data.plots_path.forEach((plotUrl, index) => {
                        displayPlot(plotUrl, index + 1);
                    });
                    document.querySelector(".control-btns").style.display = "flex";
                }
            })
            .catch(error => {
                alert("Error uploading file: " + error.message);
                document.getElementById('loadingOverlay').style.display = 'none';
            });
        }

        function clearPlots() {
            const container = document.querySelector(".plots-container");
            container.innerHTML = '';
        }

        function displayPlot(plotUrl, index) {
            const fastApiBaseUrl = "http://apps.cienciavida.org/backend/uploads";
            plotUrl = fastApiBaseUrl + "/" + plotUrl;
            const container = document.querySelector(".plots-container");

            const column = document.createElement("div");
            column.className = "column third";

            const iframe = document.createElement("iframe");
            iframe.src = plotUrl;
            iframe.style.width = "100%";
            iframe.style.height = "430px";
            iframe.style.border = "none";
            iframe.style.marginTop = "10px";

            column.appendChild(iframe);
            container.appendChild(column);
        }

        function addUploadContainer() {
            document.getElementById('additionalContainer').style.display = 'block';
            document.getElementById('addUploadBtn').style.display = 'none';
        }

        document.addEventListener('DOMContentLoaded', function() {
            const resizer = document.querySelector('.resizer');
            let isResizing = false;

            resizer.addEventListener('mousedown', function(event) {
                isResizing = true;
                document.addEventListener('mousemove', handleMouseMove);
                document.addEventListener('mouseup', function() {
                    isResizing = false;
                    document.removeEventListener('mousemove', handleMouseMove);
                });
            });

            function handleMouseMove(event) {
                if (isResizing) {
                    const newWidth = event.clientX;
                    document.querySelector('.sidebar').style.width = newWidth + 'px';
                    document.querySelector('section').style.marginLeft = newWidth + 'px';
                }
            }
        });

        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const sections = document.querySelectorAll('section');
            const toggleSidebarBtn = document.getElementById('toggleSidebarBtn');
            const showSidebarBtn = document.getElementById('showSidebarBtn');

            if (sidebar.classList.contains('hidden')) {
                sidebar.classList.remove('hidden');
                sections.forEach(section => {
                    section.style.marginLeft = '250px';
                    section.style.width = '80%';
                });
                toggleSidebarBtn.style.display = 'none';
                showSidebarBtn.style.display = 'block';
            } else {
                sidebar.classList.add('hidden');
                sections.forEach(section => {
                    section.style.marginLeft = '150px';
                    section.style.width = '85%';
                });
                toggleSidebarBtn.style.display = 'none';
                showSidebarBtn.style.display = 'block';
            }
        }

        function showSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const sections = document.querySelectorAll('section');
            const toggleSidebarBtn = document.getElementById('toggleSidebarBtn');
            const showSidebarBtn = document.getElementById('showSidebarBtn');

            sidebar.classList.remove('hidden');
            sections.forEach(section => {
                section.style.marginLeft = '250px';
                section.style.width = '80%';
            });
            toggleSidebarBtn.style.display = 'block';
            showSidebarBtn.style.display = 'none';
        }
        document.getElementById('exportBtn').addEventListener('click', function() {
            const exportOptions = document.getElementById('exportOptionsPre');
            exportOptions.style.display = exportOptions.style.display === 'none' ? 'block' : 'none';

            exportOptions.innerHTML = '';

            const options = [
                { name: 'Export for Seurat', action: exportForSeurat },
                { name: 'Export for Scanpy', action: exportForScanpy }
            ];

            const ul = document.createElement('ul');
            options.forEach(opt => {
                const li = document.createElement('li');
                li.textContent = opt.name;
                li.classList.add('export-option');
                li.addEventListener('click', function() {
                    opt.action();
                    exportOptions.style.display = 'none';
                });
                ul.appendChild(li);
            });

            exportOptions.appendChild(ul);
        });
        function openHelpModal() {
            document.getElementById('helpModal').style.display = 'block';
        }
    
        function closeHelpModal() {
            document.getElementById('helpModal').style.display = 'none';
        }
        function exportForSeurat() {
            showLoadingOverlay('Exporting for Seurat...');

            const uuid = sessionStorage.getItem("uuid");
            if (!uuid) {
                console.error("UUID not found in session storage.");
                return;
            }

            const url = `http://apps.cienciavida.org/backend/seurat_export?uuid=${uuid}`;
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ uuid: uuid })
            };

            fetch(url, options)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to export file');
                    hideLoadingOverlay();
                    return response.blob();
                })
                .then(blob => {
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = `${uuid}.rds`; 
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl); 
                })
                .catch(error => {
                    console.error("Error during file export:", error);
                    hideLoadingOverlay();
                });
        }

        function exportForScanpy() {
            showLoadingOverlay('Exporting for Scanpy...');

            const uuid = sessionStorage.getItem("uuid");
            if (!uuid) {
                console.error("UUID not found in session storage.");
                return;
            }

            const url = `http://apps.cienciavida.org/backend/scanpy_export?uuid=${uuid}`;
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ uuid: uuid })
            };

            fetch(url, options)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to export file');

                    return response.blob();
                })
                .then(blob => {
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = `${uuid}.h5ad`; 
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl); 
                    hideLoadingOverlay();

                })
                .catch(error => {
                    hideLoadingOverlay();

                    console.error("Error during file export:", error);
                    
                });
        }

        function showLoadingOverlay(message) {
            const loadingOverlay = document.getElementById('loadingOverlay');
            const loadingText = document.querySelector('#loadingOverlay p');
            loadingText.textContent = message;
            loadingOverlay.style.display = 'block';
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function downloadPlot() {
            const uuid = sessionStorage.getItem("uuid");
            if (!uuid) {
                console.error("UUID not found in session storage.");
                return;
            }
            const url = `http://apps.cienciavida.org/backend/download_plot?uuid=${uuid}`;
            fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to download plot');
                return response.blob();
            })
            .then(blob => {
                const downloadUrl = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = downloadUrl;
                a.download = `plot_${uuid}.png`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(downloadUrl);
            })
            .catch(error => {
                console.error("Error during plot download:", error);
            });
        }

        document.getElementById('downloadBtn').addEventListener('click', downloadPlot);

        function showLoadingOverlay(message) {
            const loadingOverlay = document.getElementById('loadingOverlay');
            const loadingText = document.querySelector('#loadingOverlay p');
            loadingText.textContent = message;
            loadingOverlay.style.display = 'block';
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }



        // Close the modal when clicking outside of the modal
        window.onclick = function(event) {
            const modal = document.getElementById('helpModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        };
    </script>
</body>

</html>
