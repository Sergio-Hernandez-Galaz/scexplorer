<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>scExplorer</title>
    <link rel="icon" href="/scexplorer/images/logo_sc_explorer_v1.ico" type="image/x-icon"> 
    <link rel="stylesheet" href="/scexplorer/css/styles.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
</head>

<body>
    <aside class="sidebar">
        <img src="/scexplorer/images/logo_sc_explorer_v1.png" alt="scExplorer logo" class="sidebar-logo" />
        <h1 class="sidebar-title">scExplorer</h1>
        <ul>
            <li><a href="/scexplorer/"><i class="fas fa-home"></i> Home</a></li>
            <li><a href="/scexplorer/integration"><i class="fas fa-layer-group"></i>Integration</a></li>
            <li><a href="/scexplorer/upload"><span class="step-number">0</span> <i class="fas fa-upload"></i> Upload</a></li>
            <li><a href="/scexplorer/preprocess"><span class="step-number">1</span> <i class="fas fa-cogs"></i> Preprocess</a></li>
            <li><a href="/scexplorer/embedding"><span class="step-number">2</span> <i class="fas fa-vector-square"></i> Embedding</a></li>
            <li><a href="/scexplorer/dea"><span class="step-number">3</span> <i class="fas fa-chart-bar"></i> DEA</a></li>
            <li><a href="/scexplorer/visualization"><span class="step-number">4</span> <i class="fas fa-chart-area"></i> Visualization</a></li>
            <li><a href="/scexplorer/results"><span class="step-number">5</span> <i class="fas fa-poll"></i> Results</a></li>
        </ul>
        <div class="resizer"></div>
        <i id="toggleSidebarBtn" class="fas fa-angle-double-left white-icon" onclick="toggleSidebar()"></i>
    </aside>
    <button id="showSidebarBtn" class="show-sidebar-btn" onclick="toggleSidebar()"><i class="fas fa-angle-double-right"></i></button>

    <section>
        <div id="loadingOverlay" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.6); z-index:100;">
            <div style="position:absolute; top:50%; left:50%; transform:translate(-50%, -50%);">
                <div style="color:white; font-size:20px; text-align:center;">
                    <p>Visualization...</p>
                    <img src="/scexplorer/images/loading3.svg" alt="Loading..." style="display:block; margin:auto;"/>
                </div>
            </div>
        </div>


        <div class="header-buttons">
            <button onclick="openHelpModal()">Help</button>
        </div>
        <h2><i class="fas fa-chart-area"></i> Visualization</h2>
        <div id="analysisInfoBox"></div>
    </section>
    <div id="helpModal" class="modal_help">
        <div class="modal_help-content">
            <span class="close" onclick="closeHelpModal()">&times;</span>
            <h2>Visualization </h2>
            <p>
                To visualize genes in UMAP or PCA first select the desired Dimension Reduction in (1). Next, in Search Genes (2) type the genes of interest. For this tutorial we select PTPRC, CD8A, and CD4, markers for pan-immune, CD8 T and CD4 T cells, respectively. The selected genes will appear on the right side (3). Finally, click on Run (4) to start the analysis. To continue to de download section, click on Continue to Results (5).   
                <img src="/scexplorer/images/pre_vis.png" alt="Upload Tutorial Image" style="max-width: 100%; height: auto; margin-bottom: 20px;" />
                <img src="/scexplorer/images/post_vis.png" alt="Upload Tutorial Image" style="max-width: 100%; height: auto; margin-bottom: 20px;" />

            <div style="text-align: center; margin-top: 20px;">
                <button onclick="closeHelpModal()" style="padding: 10px 20px; background-color: #000000; color: white; border: none; border-radius: 5px; cursor: pointer;">Close</button>
            </div>
        </div>
    </div>
    <div id="GenesVisualization" class="embeding-box">
        <h3>Genes Visualization</h3>
        <div class="params-row">
            <div class="input-group">
                <label for="dim_red">Dimension Reduction: 
                    <i class="fas fa-info-circle" style="color:#000000; cursor: pointer;">
                        <span class="tooltip">Select linear or non linear dimensional reduction analysis.</span>
                    </i>
                </label>
                <select id="dim_red" name="dim_red">
                    <option value="X_umap">UMAP</option>
                    <option value="X_pca">PCA</option>
                </select>
            </div>
            <div class="input-group">
                <label for="geneSearch">Search Gene: 
                    <i class="fas fa-info-circle" style="color:#000000; cursor: pointer;">
                        <span class="tooltip">Select up to 6 genes for visualization.</span>
                    </i>
                </label>
                <input type="text" id="geneSearch" placeholder="Type to filter genes" />
            </div>
            <div class="input-group">
                <label for="genes">Select Genes:</label>
                <select id="genes" name="genes" multiple size="6"></select>
            </div>
            <div class="input-group" id="selectedGenesContainer" class="selected-genes">
                <!-- Selected genes will be displayed here -->
            </div>
            <div class="header-buttons">
                <button id="submitGenes">Run</button>
            </div>
        </div>
    </div>

    <div id="GenesResults" class="embeding-box" style="display: none;">
        <h3>Genes Results</h3>
        <div id="GenesContainer" class="plots-container"></div>
        <div class="button-container" style="display: none;">
            <div class="button-row">
                <div class="upload-btn">
                    <button id="continueToResults">Continue to Results</button>
                <div class="bottom-buttons">
                    <button id="exportData" class="custom-btn">Export</button>
                    <div id="exportOptions" style="display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function showLoadingOverlay(message) {
            const loadingOverlay = document.getElementById('loadingOverlay');
            const loadingText = document.querySelector('#loadingOverlay p');
            loadingText.textContent = message;
            loadingOverlay.style.display = 'block';
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        const BASE_URL = "http://apps.cienciavida.org/backend";
        document.addEventListener("DOMContentLoaded", function() {
            initializeApp();
        });

        function initializeApp() {
            const uuid = sessionStorage.getItem("uuid");
            const analysisNameValue = sessionStorage.getItem("analysisName");
            document.getElementById("analysisInfoBox").innerHTML = `Analysis Name: ${analysisNameValue}<br>UUID: ${uuid} <i class="fas fa-copy" onclick="copyToClipboard('${uuid}')" style="cursor: pointer; font-size: 14px;"></i>`;

            if (uuid !== null && uuid !== "") {
                fetchGeneNames(uuid);
                setupGeneSearch();
                setupGeneSelection();   
                loadPlotsOnRefresh();
            }
        }

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
            }, function(err) {
                console.error('Could not copy text: ', err);
            });
        }

        function loadPlotsOnRefresh() {
            const storedPaths = sessionStorage.getItem('plotPaths');
            const storedGenes = sessionStorage.getItem('selectedGenes');

            if (storedGenes) {
                const genesArray = JSON.parse(storedGenes);
                const genesSelect = document.getElementById('genes');
                Array.from(genesSelect.options).forEach(option => {
                    option.selected = genesArray.includes(option.value);
                });
                updateSelectedGenesDisplay();
            }

            if (storedPaths) {
                const paths = JSON.parse(storedPaths);
                const plotsContainer = document.getElementById("GenesContainer");
                plotsContainer.innerHTML = '';
                paths.forEach((path, index) => {
                    if (index % 2 === 0) {
                        const rowDiv = document.createElement("div");
                        rowDiv.className = "plot-row";
                        plotsContainer.appendChild(rowDiv);
                    }
                    const lastRow = plotsContainer.lastChild;
                    iframe.onload = function () {
                        const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
                        const img = iframeDocument.querySelector('img');
                        if (img) {
                            img.style.maxWidth = '100%';
                            img.style.maxHeight = '100%';
                        }
                    };
                    const iframe = document.createElement("iframe");
                    iframe.src = `${BASE_URL}/genes_vis/${path}?_=${new Date().getTime()}`;
                    iframe.title = `Gene Visualization Plot ${index + 1}`;
                    iframe.className = "plot-iframe";
                    iframe.style.width = "49%";
                    iframe.style.height = "500px";
                    lastRow.appendChild(iframe);
                });
                document.getElementById('GenesResults').style.display = "block";
            }
        }

        function fetchGeneNames(uuid) {
            const cachedGenes = sessionStorage.getItem("cachedGeneNames");

            if (cachedGenes && !cachedGenes.includes('error')) {
                try {
                    const parsedGenes = JSON.parse(cachedGenes);
                    if (Array.isArray(parsedGenes)) {
                        populateGeneOptions(parsedGenes);
                        return;
                    } else {
                        console.error("Parsed gene names is not an array.");
                    }
                } catch (e) {
                    console.error("Error parsing cached gene names:", e);
                }
            }

            document.getElementById('loadingOverlay').style.display = 'block';
            fetch(`${BASE_URL}/gene_names?uuid=${uuid}`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'}
            })
            .then(handleResponse)
            .then(data => {
                if (Array.isArray(data)) {
                    sessionStorage.setItem("cachedGeneNames", JSON.stringify(data));
                    populateGeneOptions(data);
                } else {
                    console.error("Fetched gene names is not an array.");
                }
            })
            .catch(handleFetchError)
            .finally(() => {
                document.getElementById('loadingOverlay').style.display = 'none';
            });
        }

        function handleResponse(response) {
            if (!response.ok) throw new Error('Network response was not ok.');
            return response.json();
        }

        function populateGeneOptions(data) {
            const genesSelect = document.getElementById('genes');
            genesSelect.innerHTML = '';
            data.forEach(gene => {
                const option = document.createElement('option');
                option.value = gene;
                option.textContent = gene;
                genesSelect.appendChild(option);
            });
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function handleFetchError(error) {
            console.error("Fetch error: ", error);
            document.getElementById('loadingOverlay').style.display = 'none';
        }   

        function setupGeneSearch() {
            const geneSearch = document.getElementById('geneSearch');
            const genesSelect = document.getElementById('genes');
            geneSearch.addEventListener('input', () => {
                const searchValue = geneSearch.value.toLowerCase();
                Array.from(genesSelect.options).forEach(option => {
                    option.style.display = option.text.toLowerCase().includes(searchValue) ? '' : 'none';
                });
            });
        }

        function setupGeneSelection() {
            const genesSelect = document.getElementById('genes');
            genesSelect.addEventListener('mousedown', function(event) {
                if (event.target.tagName === 'OPTION') {
                    event.preventDefault();
                    const option = event.target;

                    if (!option.selected && genesSelect.selectedOptions.length >= 6) {
                        alert('You can only select up to 6 genes.');
                        return;
                    }

                    option.selected = !option.selected;
                    updateSelectedGenesDisplay();
                }
            });
        }

        function updateSelectedGenesDisplay() {
            const genesSelect = document.getElementById('genes');
            const selectedGenesContainer = document.getElementById('selectedGenesContainer');
            selectedGenesContainer.innerHTML = '';
            let selectedGenes = [];
            Array.from(genesSelect.selectedOptions).forEach(option => {
                const div = document.createElement('div');
                div.className = 'selected-gene';
                div.textContent = option.value;

                const close = document.createElement('span');
                close.textContent = '×';
                close.className = 'close';
                close.onclick = function() {
                    option.selected = false;
                    updateSelectedGenesDisplay();
                };

                div.appendChild(close);
                selectedGenesContainer.appendChild(div);
                selectedGenes.push(option.value);
            });
            sessionStorage.setItem('selectedGenes', JSON.stringify(selectedGenes));
        }

        document.getElementById("submitGenes").addEventListener("click", submitGeneSelection);

        function submitGeneSelection() {
            showLoadingOverlay('Running...');
            const uuid = sessionStorage.getItem("uuid");
            const reduction = document.getElementById("dim_red").value;
            const genesSelect = document.getElementById("genes");
            const geneList = Array.from(genesSelect.selectedOptions).map(option => option.value);
            const payload = {
                file_uuid: uuid,
                dim_red: reduction,
                gene_list: geneList
            };
            submitGenesVisualization(payload);
        }

        function submitGenesVisualization(payload) {
            fetch(`${BASE_URL}/genes_visualization/`, {
                method: "POST",
                body: JSON.stringify(payload),
                headers: {"Content-Type": "application/json"}
            })
            .then(handleResponse)
            .then(data => updateGenesResults(data))
            
            .catch(handleFetchError)
            .finally(() => hideLoadingOverlay());
        }

        function updateGenesResults(data) {
            const plotsContainer = document.getElementById("GenesContainer");
            while (plotsContainer.firstChild) {
                plotsContainer.removeChild(plotsContainer.firstChild);
            }
            const paths = data.map((item) => item.path);
            sessionStorage.setItem('plotPaths', JSON.stringify(paths));
            data.forEach((path, index) => {
                if (index % 2 === 0) {
                    const rowDiv = document.createElement("div");
                    rowDiv.className = "plot-row";
                    plotsContainer.appendChild(rowDiv);
                }
                const lastRow = plotsContainer.lastChild;
                const iframe = document.createElement("iframe");
                const cacheBuster = new Date().getTime();
                iframe.src = `${BASE_URL}/genes_vis/${path}?_=${cacheBuster}`;
                iframe.title = `Gene Visualization Plot ${index + 1}`;
                iframe.className = "plot-iframe";
                iframe.style.width = "49%";
                iframe.style.height = "500px";
                lastRow.appendChild(iframe);
            });
            document.getElementById('GenesResults').style.display = "block";
            const buttonContainer = document.querySelector(".button-container");
            buttonContainer.style.display = "block";
        }

        document.getElementById("continueToResults").addEventListener("click", function () {
            window.location.href = "/scexplorer/results";
        });

        document.getElementById('exportData').addEventListener('click', function() {
            const exportOptions = document.getElementById('exportOptions');
            exportOptions.style.display = exportOptions.style.display === 'none' ? 'block' : 'none';
            exportOptions.innerHTML = ''; 
        
            const options = [
                { name: 'Export for Seurat', action: exportForSeurat },
                { name: 'Export for Scanpy', action: exportForScanpy }
            ];
        
            const ul = document.createElement('ul');
            options.forEach(opt => {
                const li = document.createElement('li');
                li.textContent = opt.name;
                li.classList.add('export-option');
                li.addEventListener('click', function() {
                    opt.action();
                    exportOptions.style.display = 'none';
                });
                ul.appendChild(li);
            });
        
            exportOptions.appendChild(ul);
        });
        function openHelpModal() {
            document.getElementById('helpModal').style.display = 'block';
        }
    
        function closeHelpModal() {
            document.getElementById('helpModal').style.display = 'none';
        }
    
        window.onclick = function(event) {
            var modal = document.getElementById('helpModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
        function exportForSeurat() {
            showLoadingOverlay('Exporting for Seurat...');

            const uuid = sessionStorage.getItem("uuid");
            if (!uuid) {
                console.error("UUID not found in session storage.");
                return;
            }

            const url = `http://apps.cienciavida.org/backend/seurat_export?uuid=${uuid}`;
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ uuid: uuid })
            };

            fetch(url, options)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to export file');
                    hideLoadingOverlay();
                    return response.blob();
                })
                .then(blob => {
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = `${uuid}.rds`; 
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl); 
                })
                .catch(error => {
                    console.error("Error during file export:", error);
                    hideLoadingOverlay();
                });
        }

        function exportForScanpy() {
            showLoadingOverlay('Exporting for Scanpy...');

            const uuid = sessionStorage.getItem("uuid");
            if (!uuid) {
                console.error("UUID not found in session storage.");
                return;
            }

            const url = `http://apps.cienciavida.org/backend/scanpy_export?uuid=${uuid}`;
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ uuid: uuid })
            };

            fetch(url, options)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to export file');

                    return response.blob();
                })
                .then(blob => {
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = `${uuid}.h5ad`; 
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl); 
                    hideLoadingOverlay();

                })
                .catch(error => {
                    hideLoadingOverlay();

                    console.error("Error during file export:", error);
                    
                });
        }

        function showLoadingOverlay(message) {
            const loadingOverlay = document.getElementById('loadingOverlay');
            const loadingText = document.querySelector('#loadingOverlay p');
            loadingText.textContent = message;
            loadingOverlay.style.display = 'block';
        }

        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }
        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const sections = document.querySelectorAll('section, .embeding-box, .params-row, .plots-container');
            const toggleSidebarBtn = document.getElementById('toggleSidebarBtn');
            const showSidebarBtn = document.getElementById('showSidebarBtn');

            if (sidebar.classList.contains('hidden')) {
                sidebar.classList.remove('hidden');
                sections.forEach(section => {
                    section.style.marginLeft = '250px';
                    section.style.width = '80%';
                });
                toggleSidebarBtn.style.display = 'block';
                showSidebarBtn.style.display = 'none';
            } else {
                sidebar.classList.add('hidden');
                sections.forEach(section => {
                    section.style.marginLeft = '150px';
                    section.style.width = '80%';
                });
                toggleSidebarBtn.style.display = 'none';
                showSidebarBtn.style.display = 'block';
            }
        }

        function showSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const sections = document.querySelectorAll('section, .embeding-box, .params-row, .plots-container');
            const toggleSidebarBtn = document.getElementById('toggleSidebarBtn');
            const showSidebarBtn = document.getElementById('showSidebarBtn');

            sidebar.classList.remove('hidden');
            sections.forEach(section => {
                section.style.marginLeft = '250px';
                section.style.width = '80%';
            });
            toggleSidebarBtn.style.display = 'block';
            showSidebarBtn.style.display = 'none';
        }
    </script>
</body>

</html>
